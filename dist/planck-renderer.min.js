!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],n):n(e.Planck=e.Planck||{},e.THREE)}(this,function(e,n){"use strict";function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,n=Symbol(e);return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};return void 0===e[n]&&(e[n]=t({})),e[n]}}var r={depth_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec4 diffuseColor = vec4(1.0);\n\n#if DEPTH_PACKING == 3200\n  diffuseColor.a = opacity;\n#endif\n",depth_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_frag.glsl\n\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <logdepthbuf_fragment>\n\n#if DEPTH_PACKING == 3200\n  gl_FragColor = vec4(vec3(gl_FragCoord.z), opacity);\n#elif DEPTH_PACKING == 3201\n  gl_FragColor = packDepthToRGBA(gl_FragCoord.z);\n#endif\n",depth_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_frag.glsl\n\n#if DEPTH_PACKING == 3200\n  uniform float opacity;\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",depth_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_vert.glsl\n\n#include <uv_vertex>\n#include <skinbase_vertex>\n#ifdef USE_DISPLACEMENTMAP\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinnormal_vertex>\n#endif\n#include <begin_vertex>\n",depth_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_vert.glsl\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n",depth_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_vert.glsl\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",distance_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec4 diffuseColor = vec4(1.0);\n\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n\nfloat dist = length(vWorldPosition - referencePosition);\ndist = (dist - nearDistance) / (farDistance - nearDistance);\ndist = saturate(dist); // clamp to [0, 1]\n",distance_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_frag.glsl\n\ngl_FragColor = packDepthToRGBA(dist);\n",distance_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_frag.glsl\n\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",distance_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_vert.glsl\n\n#include <uv_vertex>\n#include <skinbase_vertex>\n#ifdef USE_DISPLACEMENTMAP\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinnormal_vertex>\n#endif\n#include <begin_vertex>\n",distance_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_vert.glsl\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <worldpos_vertex>\n#include <clipping_planes_vertex>\n\nvWorldPosition = worldPosition.xyz;\n",distance_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_vert.glsl\n\n#define DISTANCE\n\nvarying vec4 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",line_basic_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec3 outgoingLight = vec3(0.0);\nvec4 diffuseColor = vec4(diffuse, opacity);\n",line_basic_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_frag.glsl\n\n#include <logdepthbuf_fragment>\n#include <color_fragment>\n\noutgoingLight = diffuseColor.rgb; // simple shader\n\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#include <premultiplied_alpha_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n",line_basic_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_frag.glsl\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",line_basic_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_vert.glsl\n\n#include <color_vertex>\n#include <begin_vertex>\n",line_basic_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_vert.glsl\n\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n",line_basic_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_vert.glsl\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",mesh_lambert_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec4 diffuseColor = vec4(diffuse, opacity);\nReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\nvec3 totalEmissiveRadiance = emissive;\n",mesh_lambert_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_frag.glsl\n\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <specularmap_fragment>\n#include <emissivemap_fragment>\n\n// accumulation\nreflectedLight.indirectDiffuse = getAmbientLightIrradiance(ambientLightColor);\n\n#include <lightmap_fragment>\n\nreflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert(diffuseColor.rgb);\n\n#ifdef DOUBLE_SIDED\n  reflectedLight.directDiffuse = (gl_FrontFacing) ? vLightFront : vLightBack;\n#else\n  reflectedLight.directDiffuse = vLightFront;\n#endif\n\nreflectedLight.directDiffuse *= BRDF_Diffuse_Lambert(diffuseColor.rgb) * getShadowMask();\n\n// modulation\n#include <aomap_fragment>\n\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n#include <envmap_fragment>\n\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n",mesh_lambert_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_frag.glsl\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n  varying vec3 vLightBack;\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",mesh_lambert_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_vert.glsl\n\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <begin_vertex>\n",mesh_lambert_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_vert.glsl\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <envmap_vertex>\n#include <lights_lambert_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n",mesh_lambert_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_vert.glsl\n\n#define LAMBERT\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n  varying vec3 vLightBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",picking_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <clipping_planes_fragment>\n\ngl_FragColor = identifier;\n",picking_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <logdepthbuf_fragment>\n",picking_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\nuniform vec4 identifier;\n\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",picking_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <skinbase_vertex>\n#include <begin_vertex>\n",picking_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <worldpos_vertex>\n#include <clipping_planes_vertex>\n",picking_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",points_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec3 outgoingLight = vec3(0.0);\nvec4 diffuseColor = vec4(diffuse, opacity);\n",points_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_frag.glsl\n\n#include <logdepthbuf_fragment>\n#include <map_particle_fragment>\n#include <color_fragment>\n#include <alphatest_fragment>\n\noutgoingLight = diffuseColor.rgb;\n\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#include <premultiplied_alpha_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n",points_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_frag.glsl\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",points_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_vert.glsl\n\n#include <color_vertex>\n#include <begin_vertex>\n",points_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_vert.glsl\n\n#include <project_vertex>\n\n#ifdef USE_SIZEATTENUATION\n  gl_PointSize = size * (scale / - mvPosition.z);\n#else\n  gl_PointSize = size;\n#endif\n\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n",points_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_vert.glsl\n\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n"},i={include:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"planck/",i=new RegExp("#include +<"+t+"([\\w\\d.]+)>","g");return e.replace(i,function e(r,a){var o=n[a];if(void 0===o)throw new Error("Could not resolve #include <"+t+a+">");return o.replace(i,e)})}},a="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/line_basic_frag_params>\n\nuniform float pixelRatio;\nuniform float targetPixelRatio;\n\nvoid main() {\n  #include <planck/line_basic_frag_begin>\n\n  diffuseColor.a *= pixelRatio / targetPixelRatio;\n\n  #include <planck/line_basic_frag_end>\n}\n",o="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/line_basic_vert_params>\n\nvoid main() {\n  #include <planck/line_basic_vert_begin>\n  #include <planck/line_basic_vert_end>\n}\n",s=(function(){function e(e){this.value=e}function n(n){function t(i,a){try{var o=n[i](a),s=o.value;s instanceof e?Promise.resolve(s.value).then(function(e){t("next",e)},function(e){t("throw",e)}):r(o.done?"return":"normal",o.value)}catch(e){r("throw",e)}}function r(e,n){switch(e){case"return":i.resolve({value:n,done:!0});break;case"throw":i.reject(n);break;default:i.resolve({value:n,done:!1})}(i=i.next)?t(i.key,i.arg):a=null}var i,a;this._invoke=function(e,n){return new Promise(function(r,o){var s={key:e,arg:n,resolve:r,reject:o,next:null};a?a=a.next=s:(i=a=s,t(e,n))})},"function"!=typeof n.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(n.prototype[Symbol.asyncIterator]=function(){return this}),n.prototype.next=function(e){return this._invoke("next",e)},n.prototype.throw=function(e){return this._invoke("throw",e)},n.prototype.return=function(e){return this._invoke("return",e)}}(),function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}),l=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),d=function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)},c=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n},p=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(this,t);var r=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));r.color=new n.Color(16777215);var l=new n.LineBasicMaterial;return n.LineBasicMaterial.prototype.copy.call(r,l),l.dispose(),r.setValues(e),r.isLineBasicMaterial=!0,r.uniforms=n.UniformsUtils.merge([n.UniformsLib.common,n.UniformsLib.fog,{pixelRatio:{value:1},targetPixelRatio:{value:2}}]),r.vertexShader=i.include(o),r.fragmentShader=i.include(a),r}return d(t,e),t}(n.ShaderMaterial),u="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/picking_frag_params>\n\nvoid main() {\n  #include <planck/picking_frag_begin>\n  #include <planck/picking_frag_end>\n}\n",g="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/picking_vert_params>\n\nvoid main() {\n  #include <planck/picking_vert_begin>\n  #include <planck/picking_vert_end>\n}\n",h=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(this,t);var r=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return r.setValues(e),r.fog=!1,r.lights=!1,r.isPickingMaterial=!0,r.uniforms=n.UniformsUtils.merge([n.UniformsLib.common,{identifier:{value:new n.Vector4}}]),r.vertexShader=i.include(g),r.fragmentShader=i.include(u),r}return d(t,e),l(t,[{key:"identifier",get:function(){var e=this.uniforms.identifier.value;return(255*e.x&255)<<24|(255*e.y&255)<<16|(255*e.z&255)<<8|(255*e.w&255)<<0>>>0},set:function(e){var n=this.uniforms.identifier.value;n.x=(e>>>24&255)/255,n.y=(e>>>16&255)/255,n.z=(e>>>8&255)/255,n.w=(e>>>0&255)/255}}]),t}(n.ShaderMaterial),f=t("Picking"),_=function(){function e(t){s(this,e);var r=f(this);r.renderer=t,r.buffer=new Uint8Array(4),r.objects={},r.material=new h,r.materialPool=[r.material],r.materialIndex=0,this.layers=new n.Layers,this.renderBufferDirect=this.renderBufferDirect.bind(this)}return l(e,[{key:"pick",value:function(e,n,t){var r=f(this),i=r.buffer,a=(n+1)*e.width/2,o=(t+1)*e.height/2;this.renderer.readRenderTargetPixels(e,a,o,1,1,i);var s=(i[0]<<24|i[1]<<16|i[2]<<8|i[3]<<0)>>>0,l=r.objects,d=s,c=l[d];if(0!==s&&!c)for(var p=Object.keys(l),u=0;u<p.length;++u)if(p[u]>s-1){c=l[d=+p[u-1]];break}return{identifier:s,target:c,targetIdentifier:d}}},{key:"render",value:function(e,t,r,i){var a=this.renderer;a.saveOptions(),a.autoClear=!0,a.gammaInput=!1,a.gammaOutput=!1,a.shadowMap.enabled=!1,a.toneMapping=n.NoToneMapping;var o=f(this);o.objects={},o.materialIndex=0,o.nextIdentifier=1;var s=t.layers;t.layers=this.layers,a.renderBufferDirect=this.renderBufferDirect,a.render(e,t,r,i),delete a.renderBufferDirect,t.layers=s,o.objects[o.nextIdentifier]=null,a.restoreOptions()}},{key:"renderBufferDirect",value:function(e,n,t,r,i,a){var o=f(this),s=i.customPickingMaterial;s||((s=o.materialPool[o.materialIndex++])||(s=o.material.clone(),o.materialPool.push(s)),s.depthTest=i.material.depthTest,s.depthWrite=i.material.depthWrite,s.polygonOffset=i.material.polygonOffset,s.polygonOffsetFactor=i.material.polygonOffsetFactor,s.polygonOffsetUnits=i.material.polygonOffsetUnits);var l=o.nextIdentifier;s.identifier=l,o.objects[l]=i,o.nextIdentifier+=i.identifierLength||1;var d=this.renderer;d.constructor.prototype.renderBufferDirect.apply(d,[e,n,t,s,i,a])}},{key:"renderer",get:function(){return f(this).renderer}}]),e}(),m="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/points_frag_params>\n\nvoid main() {\n  #include <planck/points_frag_begin>\n  #include <planck/points_frag_end>\n}\n",v="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/points_vert_params>\n\nvoid main() {\n  #include <planck/points_vert_begin>\n  #include <planck/points_vert_end>\n}\n",C=function(e){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(this,t);var r=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));r.color=new n.Color(16777215);var a=new n.PointsMaterial;return n.PointsMaterial.prototype.copy.call(r,a),a.dispose(),r.setValues(e),r.isPointsMaterial=!0,r.uniforms=n.UniformsUtils.merge([n.ShaderLib.points.uniforms,{pixelRatio:{value:1},targetPixelRatio:{value:2}}]),r.vertexShader=i.include(v),r.fragmentShader=i.include(m),r}return d(t,e),t}(n.ShaderMaterial),L=t("Renderer"),y=function(e){function n(){var e;s(this,n);for(var t=arguments.length,r=Array(t),i=0;i<t;i++)r[i]=arguments[i];var a=c(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(r))),o=L(a);return o.perFrameUniforms={},o.options={},o.render=a.render.bind(a),o.renderBufferDirect=a.renderBufferDirect.bind(a),o.renderBufferImmediate=a.renderBufferImmediate.bind(a),delete a.render,delete a.renderBufferDirect,delete a.renderBufferImmediate,a}return d(n,e),l(n,[{key:"render",value:function(e,n,t,r){var i=L(this);i.perFrameUniforms=this.createPerFrameUniforms(e,n),i.render(e,n,t,r)}},{key:"renderBufferDirect",value:function(e,n,t,r,i,a){var o=L(this);this.applyPerFrameUniforms(r),o.renderBufferDirect(e,n,t,r,i,a)}},{key:"renderBufferImmediate",value:function(e,n,t){var r=L(this);this.applyPerFrameUniforms(t),r.renderBufferImmediate(e,n,t)}},{key:"createPerFrameUniforms",value:function(e,n){var t={pixelRatio:this.getPixelRatio()};return n.isOrthographicCamera&&(t.cameraZoom=n.zoom),t}},{key:"applyPerFrameUniforms",value:function(e){if(e){var n=e.uniforms;if(n)for(var t=L(this),r=Object.keys(t.perFrameUniforms),i=0;i<r.length;++i){var a=r[i],o=n[a];o&&(o.value=t.perFrameUniforms[a])}}}},{key:"saveOptions",value:function(){var e=L(this).options;e.autoClear=this.autoClear,e.autoClearColor=this.autoClearColor,e.autoClearDepth=this.autoClearDepth,e.autoClearStencil=this.autoClearStencil,e.clippingPlanes=this.clippingPlanes,e.gammaFactor=this.gammaFactor,e.gammaInput=this.gammaInput,e.gammaOutput=this.gammaOutput,e.localClippingEnabled=this.localClippingEnabled,e.maxMorphNormals=this.maxMorphNormals,e.maxMorphTargets=this.maxMorphTargets,e.physicallyCorrectLights=this.physicallyCorrectLights,e.shadowMapEnabled=this.shadowMap.enabled,e.shadowMapRenderReverseSided=this.shadowMap.renderReverseSided,e.shadowMapRenderSingleSided=this.shadowMap.renderSingleSided,e.shadowMapType=this.shadowMap.type,e.sortObjects=this.sortObjects,e.toneMapping=this.toneMapping,e.toneMappingExposure=this.toneMappingExposure,e.toneMappingWhitePoint=this.toneMappingWhitePoint}},{key:"restoreOptions",value:function(){var e=L(this).options;this.autoClear=e.autoClear,this.autoClearColor=e.autoClearColor,this.autoClearDepth=e.autoClearDepth,this.autoClearStencil=e.autoClearStencil,this.clippingPlanes=e.clippingPlanes,this.gammaFactor=e.gammaFactor,this.gammaInput=e.gammaInput,this.gammaOutput=e.gammaOutput,this.localClippingEnabled=e.localClippingEnabled,this.maxMorphNormals=e.maxMorphNormals,this.maxMorphTargets=e.maxMorphTargets,this.physicallyCorrectLights=e.physicallyCorrectLights,this.shadowMap.enabled=e.shadowMapEnabled,this.shadowMap.renderReverseSided=e.shadowMapRenderReverseSided,this.shadowMap.renderSingleSided=e.shadowMapRenderSingleSided,this.shadowMap.type=e.shadowMapType,this.sortObjects=e.sortObjects,this.toneMapping=e.toneMapping,this.toneMappingExposure=e.toneMappingExposure,this.toneMappingWhitePoint=e.toneMappingWhitePoint}}]),n}(n.WebGLRenderer);e.LineBasicMaterial=p,e.Picking=_,e.PickingMaterial=h,e.PointsMaterial=C,e.Renderer=y,e.Shader=i,e.ShaderLib=r,Object.defineProperty(e,"__esModule",{value:!0})});