!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],n):n(e.Planck=e.Planck||{},e.THREE)}(this,function(e,s){"use strict";var n={depth_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec4 diffuseColor = vec4(1.0);\n\n#if DEPTH_PACKING == 3200\n  diffuseColor.a = opacity;\n#endif\n",depth_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_frag.glsl\n\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <logdepthbuf_fragment>\n\n#if DEPTH_PACKING == 3200\n  gl_FragColor = vec4(vec3(gl_FragCoord.z), opacity);\n#elif DEPTH_PACKING == 3201\n  gl_FragColor = packDepthToRGBA(gl_FragCoord.z);\n#endif\n",depth_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_frag.glsl\n\n#if DEPTH_PACKING == 3200\n  uniform float opacity;\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",depth_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_vert.glsl\n\n#include <uv_vertex>\n#include <skinbase_vertex>\n#ifdef USE_DISPLACEMENTMAP\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinnormal_vertex>\n#endif\n#include <begin_vertex>\n",depth_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_vert.glsl\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n",depth_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// depth_vert.glsl\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",distance_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec4 diffuseColor = vec4(1.0);\n\n#include <map_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n\nfloat dist = length(vWorldPosition - referencePosition);\ndist = (dist - nearDistance) / (farDistance - nearDistance);\ndist = saturate(dist); // clamp to [0, 1]\n",distance_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_frag.glsl\n\ngl_FragColor = packDepthToRGBA(dist);\n",distance_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_frag.glsl\n\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",distance_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_vert.glsl\n\n#include <uv_vertex>\n#include <skinbase_vertex>\n#ifdef USE_DISPLACEMENTMAP\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinnormal_vertex>\n#endif\n#include <begin_vertex>\n",distance_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_vert.glsl\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <displacementmap_vertex>\n#include <project_vertex>\n#include <worldpos_vertex>\n#include <clipping_planes_vertex>\n\nvWorldPosition = worldPosition.xyz;\n",distance_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// distanceRGBA_vert.glsl\n\n#define DISTANCE\n\nvarying vec4 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",line_basic_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec3 outgoingLight = vec3(0.0);\nvec4 diffuseColor = vec4(diffuse, opacity);\n",line_basic_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_frag.glsl\n\n#include <logdepthbuf_fragment>\n#include <color_fragment>\n\noutgoingLight = diffuseColor.rgb; // simple shader\n\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#include <premultiplied_alpha_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n",line_basic_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_frag.glsl\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",line_basic_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_vert.glsl\n\n#include <color_vertex>\n#include <begin_vertex>\n",line_basic_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_vert.glsl\n\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n",line_basic_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// linedashed_vert.glsl\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",mesh_lambert_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec4 diffuseColor = vec4(diffuse, opacity);\nReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\nvec3 totalEmissiveRadiance = emissive;\n",mesh_lambert_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_frag.glsl\n\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <specularmap_fragment>\n#include <emissivemap_fragment>\n\n// accumulation\nreflectedLight.indirectDiffuse = getAmbientLightIrradiance(ambientLightColor);\n\n#include <lightmap_fragment>\n\nreflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert(diffuseColor.rgb);\n\n#ifdef DOUBLE_SIDED\n  reflectedLight.directDiffuse = (gl_FrontFacing) ? vLightFront : vLightBack;\n#else\n  reflectedLight.directDiffuse = vLightFront;\n#endif\n\nreflectedLight.directDiffuse *= BRDF_Diffuse_Lambert(diffuseColor.rgb) * getShadowMask();\n\n// modulation\n#include <aomap_fragment>\n\nvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n#include <envmap_fragment>\n\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n",mesh_lambert_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_frag.glsl\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n  varying vec3 vLightBack;\n#endif\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",mesh_lambert_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_vert.glsl\n\n#include <uv_vertex>\n#include <uv2_vertex>\n#include <color_vertex>\n#include <beginnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <defaultnormal_vertex>\n#include <begin_vertex>\n",mesh_lambert_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_vert.glsl\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <envmap_vertex>\n#include <lights_lambert_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n",mesh_lambert_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// meshlambert_vert.glsl\n\n#define LAMBERT\n\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n  varying vec3 vLightBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",picking_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <clipping_planes_fragment>\n\ngl_FragColor = identifier;\n",picking_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <logdepthbuf_fragment>\n",picking_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\nuniform vec4 identifier;\n\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",picking_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <skinbase_vertex>\n#include <begin_vertex>\n",picking_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <morphtarget_vertex>\n#include <skinning_vertex>\n#include <project_vertex>\n#include <logdepthbuf_vertex>\n#include <worldpos_vertex>\n#include <clipping_planes_vertex>\n",picking_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n",points_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_frag.glsl\n\n#include <clipping_planes_fragment>\n\nvec3 outgoingLight = vec3(0.0);\nvec4 diffuseColor = vec4(diffuse, opacity);\n",points_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_frag.glsl\n\n#include <logdepthbuf_fragment>\n#include <map_particle_fragment>\n#include <color_fragment>\n#include <alphatest_fragment>\n\noutgoingLight = diffuseColor.rgb;\n\ngl_FragColor = vec4(outgoingLight, diffuseColor.a);\n\n#include <premultiplied_alpha_fragment>\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n",points_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_frag.glsl\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n",points_picking_frag_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <clipping_planes_fragment>\n\ngl_FragColor = vVertexID;\n",points_picking_frag_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <logdepthbuf_fragment>\n",points_picking_frag_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <common>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec4 vVertexID;\n",points_picking_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <begin_vertex>\n",points_picking_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <project_vertex>\n\n#ifdef USE_SIZEATTENUATION\n  gl_PointSize = size * (scale / -mvPosition.z);\n#else\n  gl_PointSize = size;\n#endif\n\n{\n  // Add 1 to distinguish points draw or not\n  vec4 v = decomposeVertexID(vertexID + 1.0);\n  vVertexID = addVertexID(identifier, v) / 255.0;\n}\n\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n",points_picking_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nuniform vec4 identifier;\n\nattribute float vertexID;\n\nvarying vec4 vVertexID;\n\nvec4 decomposeVertexID(float v) {\n  float x = floor(v / 16777216.0);\n  v -= x * 16777216.0;\n  float y = floor(v / 65536.0);\n  v -= y * 65536.0;\n  float z = floor(v / 256.0);\n  v -= z * 256.0;\n  return vec4(x, y, z, v);\n}\n\nvec4 addVertexID(vec4 v, vec4 id) {\n  vec4 r = floor(v * 255.0 + 0.5) + id;\n  r.z += floor(r.w / 256.0);\n  r.y += floor(r.z / 256.0);\n  r.x += floor(r.y / 256.0);\n  return mod(r, 256.0);\n}\n",points_vert_begin:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_vert.glsl\n\n#include <color_vertex>\n#include <begin_vertex>\n",points_vert_end:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_vert.glsl\n\n#include <project_vertex>\n\n#ifdef USE_SIZEATTENUATION\n  gl_PointSize = size * (scale / -mvPosition.z);\n#else\n  gl_PointSize = size;\n#endif\n\n#include <logdepthbuf_vertex>\n#include <clipping_planes_vertex>\n#include <worldpos_vertex>\n#include <shadowmap_vertex>\n#include <fog_vertex>\n",points_vert_params:"#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2010-2017 three.js authors\n// Copyright (C) 2016-Present Shota Matsuda\n\n// r87\n// points_vert.glsl\n\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n"};function r(e){var r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:n,a=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"planck/",o=new RegExp("#include +<"+a+"([\\w\\d.]+)>","g");return e.replace(o,function e(n,i){var t=r[i];if(void 0===t)throw new Error("Could not resolve #include <"+a+i+">");return t.replace(o,e)})}var i={include:r},a="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/line_basic_frag_params>\n\nuniform float pixelRatio;\nuniform float targetPixelRatio;\n\nvoid main() {\n  #include <planck/line_basic_frag_begin>\n\n  diffuseColor.a *= pixelRatio / targetPixelRatio;\n\n  #include <planck/line_basic_frag_end>\n}\n",o="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/line_basic_vert_params>\n\nvoid main() {\n  #include <planck/line_basic_vert_begin>\n  #include <planck/line_basic_vert_end>\n}\n",l=function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")},c=function(){function t(e,n){for(var i=0;i<n.length;i++){var t=n[i];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),d=function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)},p=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n},t=function(e){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};l(this,t);var n=p(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.color=new s.Color(16777215);var i=new s.LineBasicMaterial;return s.LineBasicMaterial.prototype.copy.call(n,i),i.dispose(),n.setValues(e),n.isLineBasicMaterial=!0,n.uniforms=s.UniformsUtils.merge([s.UniformsLib.common,s.UniformsLib.fog,{pixelRatio:{value:1},targetPixelRatio:{value:2}}]),n.vertexShader=r(o),n.fragmentShader=r(a),n}return d(t,e),t}(s.ShaderMaterial);function u(e){var i=Symbol(e);return function(e,n){return null==e[i]&&(e[i]="function"==typeof n?n({}):{}),e[i]}}var g="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/picking_frag_params>\n\nvoid main() {\n  #include <planck/picking_frag_begin>\n  #include <planck/picking_frag_end>\n}\n",f="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/picking_vert_params>\n\nvoid main() {\n  #include <planck/picking_vert_begin>\n  #include <planck/picking_vert_end>\n}\n",_=function(e){function i(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};l(this,i);var n=p(this,(i.__proto__||Object.getPrototypeOf(i)).call(this));return n.setValues(e),n.fog=!1,n.lights=!1,n.isPickingMaterial=!0,n.uniforms=s.UniformsUtils.merge([s.UniformsLib.common,{identifier:{value:new s.Vector4}}]),n.vertexShader=r(f),n.fragmentShader=r(g),n}return d(i,e),c(i,[{key:"identifier",get:function(){var e=this.uniforms.identifier.value;return((255*e.x&255)<<24|(255*e.y&255)<<16|(255*e.z&255)<<8|(255*e.w&255)<<0)>>>0},set:function(e){var n=this.uniforms.identifier.value;n.x=(e>>>24&255)/255,n.y=(e>>>16&255)/255,n.z=(e>>>8&255)/255,n.w=(e>>>0&255)/255}}]),i}(s.ShaderMaterial),h=u("Picking"),m=function(){function i(e){l(this,i);var n=h(this);n.renderer=e,n.buffer=new Uint8Array(4),n.objects={},n.material=new _,n.materialPool=[n.material],n.materialIndex=0,this.layers=new s.Layers,this.renderBufferDirect=this.renderBufferDirect.bind(this)}return c(i,[{key:"pick",value:function(e,n,i){var t=h(this),r=t.buffer,a=(n+1)*e.width/2,o=(i+1)*e.height/2;this.renderer.readRenderTargetPixels(e,a,o,1,1,r);var s=(r[0]<<24|r[1]<<16|r[2]<<8|r[3]<<0)>>>0,l=t.objects,c=s,d=l[c];if(0!==s&&!d)for(var p=Object.keys(l),u=0;u<p.length;++u)if(p[u]>s-1){d=l[c=+p[u-1]];break}return{identifier:s,target:d,targetIdentifier:c}}},{key:"render",value:function(e,n,i,t){var r=this.renderer;r.saveOptions(),r.autoClear=!0,r.gammaInput=!1,r.gammaOutput=!1,r.shadowMap.enabled=!1,r.toneMapping=s.NoToneMapping;var a=h(this);a.objects={},a.materialIndex=0,a.nextIdentifier=1;var o=n.layers;n.layers=this.layers,r.renderBufferDirect=this.renderBufferDirect,r.render(e,n,i,t),delete r.renderBufferDirect,n.layers=o,a.objects[a.nextIdentifier]=null,r.restoreOptions()}},{key:"renderBufferDirect",value:function(e,n,i,t,r,a){var o=h(this),s=r.customPickingMaterial;s||((s=o.materialPool[o.materialIndex++])||(s=o.material.clone(),o.materialPool.push(s)),s.depthTest=r.material.depthTest,s.depthWrite=r.material.depthWrite,s.polygonOffset=r.material.polygonOffset,s.polygonOffsetFactor=r.material.polygonOffsetFactor,s.polygonOffsetUnits=r.material.polygonOffsetUnits);var l=o.nextIdentifier;s.identifier=l,o.objects[l]=r,o.nextIdentifier+=r.identifierLength||1;var c=this.renderer;c.constructor.prototype.renderBufferDirect.apply(c,[e,n,i,s,r,a])}},{key:"renderer",get:function(){return h(this).renderer}}]),i}(),v="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/points_frag_params>\n\nvoid main() {\n  #include <planck/points_frag_begin>\n  #include <planck/points_frag_end>\n}\n",C="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/points_vert_params>\n\nvoid main() {\n  #include <planck/points_vert_begin>\n  #include <planck/points_vert_end>\n}\n",L=function(e){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};l(this,t);var n=p(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.color=new s.Color(16777215);var i=new s.PointsMaterial;return s.PointsMaterial.prototype.copy.call(n,i),i.dispose(),n.setValues(e),n.isPointsMaterial=!0,n.uniforms=s.UniformsUtils.merge([s.ShaderLib.points.uniforms]),n.vertexShader=r(C),n.fragmentShader=r(v),n}return d(t,e),t}(s.ShaderMaterial),y="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/points_picking_frag_params>\n\nvoid main() {\n  #include <planck/points_picking_frag_begin>\n  #include <planck/points_picking_frag_end>\n}\n",x="#define GLSLIFY 1\n// The MIT License\n// Copyright (C) 2016-Present Shota Matsuda\n\n#include <planck/points_picking_vert_params>\n\nvoid main() {\n  #include <planck/points_picking_vert_begin>\n  #include <planck/points_picking_vert_end>\n}\n",M=function(e){function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};l(this,t);var n=p(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));n.color=new s.Color(16777215);var i=new s.PointsMaterial;return s.PointsMaterial.prototype.copy.call(n,i),i.dispose(),delete n.color,n.setValues(e),n.fog=!1,n.lights=!1,n.isPointsMaterial=!0,n.isPickingMaterial=!0,n.uniforms=s.UniformsUtils.merge([s.ShaderLib.points.uniforms,{identifier:{value:new s.Vector4}}]),n.vertexShader=r(x),n.fragmentShader=r(y),n}return d(t,e),c(t,[{key:"identifier",get:function(){var e=this.uniforms.identifier.value;return((255*e.x&255)<<24|(255*e.y&255)<<16|(255*e.z&255)<<8|(255*e.w&255)<<0)>>>0},set:function(e){var n=this.uniforms.identifier.value;n.x=(e>>>24&255)/255,n.y=(e>>>16&255)/255,n.z=(e>>>8&255)/255,n.w=(e>>>0&255)/255}}]),t}(s.ShaderMaterial),b=u("Renderer"),I=function(e){function o(){var e;l(this,o);for(var n=arguments.length,i=Array(n),t=0;t<n;t++)i[t]=arguments[t];var r=p(this,(e=o.__proto__||Object.getPrototypeOf(o)).call.apply(e,[this].concat(i))),a=b(r);return a.perFrameUniforms={},a.options={},a.render=r.render.bind(r),a.renderBufferDirect=r.renderBufferDirect.bind(r),a.renderBufferImmediate=r.renderBufferImmediate.bind(r),delete r.render,delete r.renderBufferDirect,delete r.renderBufferImmediate,r}return d(o,e),c(o,[{key:"render",value:function(e,n,i,t){var r=b(this);r.perFrameUniforms=this.createPerFrameUniforms(e,n),r.render(e,n,i,t)}},{key:"renderBufferDirect",value:function(e,n,i,t,r,a){var o=b(this);this.applyPerFrameUniforms(t),o.renderBufferDirect(e,n,i,t,r,a)}},{key:"renderBufferImmediate",value:function(e,n,i){var t=b(this);this.applyPerFrameUniforms(i),t.renderBufferImmediate(e,n,i)}},{key:"createPerFrameUniforms",value:function(e,n){var i={pixelRatio:this.getPixelRatio()};return n.isOrthographicCamera&&(i.cameraZoom=n.zoom),i}},{key:"applyPerFrameUniforms",value:function(e){if(e){var n=e.uniforms;if(n)for(var i=b(this),t=Object.keys(i.perFrameUniforms),r=0;r<t.length;++r){var a=t[r],o=n[a];o&&(o.value=i.perFrameUniforms[a])}}}},{key:"saveOptions",value:function(){var e=b(this).options;e.autoClear=this.autoClear,e.autoClearColor=this.autoClearColor,e.autoClearDepth=this.autoClearDepth,e.autoClearStencil=this.autoClearStencil,e.clippingPlanes=this.clippingPlanes,e.gammaFactor=this.gammaFactor,e.gammaInput=this.gammaInput,e.gammaOutput=this.gammaOutput,e.localClippingEnabled=this.localClippingEnabled,e.maxMorphNormals=this.maxMorphNormals,e.maxMorphTargets=this.maxMorphTargets,e.physicallyCorrectLights=this.physicallyCorrectLights,e.shadowMapEnabled=this.shadowMap.enabled,e.shadowMapType=this.shadowMap.type,e.sortObjects=this.sortObjects,e.toneMapping=this.toneMapping,e.toneMappingExposure=this.toneMappingExposure,e.toneMappingWhitePoint=this.toneMappingWhitePoint}},{key:"restoreOptions",value:function(){var e=b(this).options;this.autoClear=e.autoClear,this.autoClearColor=e.autoClearColor,this.autoClearDepth=e.autoClearDepth,this.autoClearStencil=e.autoClearStencil,this.clippingPlanes=e.clippingPlanes,this.gammaFactor=e.gammaFactor,this.gammaInput=e.gammaInput,this.gammaOutput=e.gammaOutput,this.localClippingEnabled=e.localClippingEnabled,this.maxMorphNormals=e.maxMorphNormals,this.maxMorphTargets=e.maxMorphTargets,this.physicallyCorrectLights=e.physicallyCorrectLights,this.shadowMap.enabled=e.shadowMapEnabled,this.shadowMap.type=e.shadowMapType,this.sortObjects=e.sortObjects,this.toneMapping=e.toneMapping,this.toneMappingExposure=e.toneMappingExposure,this.toneMappingWhitePoint=e.toneMappingWhitePoint}}]),o}(s.WebGLRenderer);e.LineBasicMaterial=t,e.Picking=m,e.PickingMaterial=_,e.PointsMaterial=L,e.PointsPickingMaterial=M,e.Renderer=I,e.Shader=i,e.ShaderLib=n,Object.defineProperty(e,"__esModule",{value:!0})});